{"version":3,"sources":["components/Navbar.js","components/Home.js","components/AboutMe.js","components/Projects.js","components/ContactMe.js","App.js","serviceWorker.js","index.js","world.png","chris.png"],"names":["Navbar","className","to","Bounce","styled","div","keyframes","bounce","Home","src","world","alt","React","Component","AboutMe","logo","href","download","ProjectAPI","projects","project","name","imageUrl","description","url","all","this","get","id","find","p","AllProjects","map","key","Project","props","pj","parseInt","match","params","Projects","exact","path","component","ContactMe","useState","setName","email","setEmail","message","setMessage","onSubmit","e","preventDefault","alert","placeholder","value","onChange","target","type","App","components","Error","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","module","exports"],"mappings":"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","file":"static/js/main.15f55420.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport \"../Navbar.css\";\n\nfunction Navbar() {\n    return (\n        <div className=\"navBar\">\n            <div className=\"navLinks\">\n                <Link className=\"link\" to=\"/\">Home</Link>\n                <Link className=\"link\" to=\"/about\">About Me</Link>\n                <Link className=\"link\" to=\"/projects\">Projects</Link>\n                <Link className=\"link\" to=\"/contact\">Contact </Link>\n            </div>\n        </div>\n    );\n}\n\nexport default Navbar;","import React from 'react';\nimport styled, { keyframes } from 'styled-components';\nimport{ bounce } from 'react-animations';\nimport \"../Home.css\";\nimport world from '../world.png';\n\nconst Bounce = styled.div`animation: 2s ${keyframes`${bounce}`} infinite`;\n\nclass Home extends React.Component{\n\n    render(){\n        return(\n            <div className = \"Home\">\n                <div className = \"World\">\n                    <Bounce>\n                        <img src={world} className=\"Home-world\" alt=\"world\" />\n                    </Bounce>\n                </div>\n                <div className = \"Text\" >\n                    <div className = \"Text1\">Hi, I'm Chris Espinal</div>\n                    <div className = \"Text2\">Let's Connect!</div>\n                </div>\n            </div>\n        );\n    }\n\n}\n\nexport default Home;","import React from 'react';\nimport \"../AboutMe.css\";\nimport logo from '../chris.png';\n\nclass AboutMe extends React.Component{\n\n    render(){\n        return(\n            <div className = \"AboutMe\">\n                <div className = \"Header\" >\n                    <h1> About Me </h1>\n                    <div className = \"Bio\" >I'm a senior at CUNY Lehman \n                        College aspiring to be a Software Engineer/Web \n                        Developer. When I'm not hacking my problems away, \n                        I enjoy long walks on the beach while sipping on \n                        Pina Colada.\n                    </div>\n                    <br/>\n                    <img src = \"https://media.giphy.com/media/3o7qE1TfOPGlb5M5hu/giphy.gif\" className= \"Photo2\" alt= \"logo2\" />\n                    <br/>\n                </div>\n                    <div>\n                        <img src={logo} className=\"Photo1\" alt=\"logo\" />\n                        <div className = \"Resume-Container\">\n                        <a href=\"/chrisespinal_resume.pdf\" className = \"Resume\" download> Download Resume Here</a>\n                        </div>\n                    </div>\n            </div>\n\n        );\n    }\n\n}\n\nexport default AboutMe;","import React from 'react';\nimport { Link, Switch, Route } from 'react-router-dom';\nimport \"../Projects.css\";\n\nconst ProjectAPI = {\n    projects: [\n      { project: 1, name: 'Connect4', imageUrl: \"https://media.giphy.com/media/pSGbcMvcnav5jIEDMg/giphy.gif\", description: 'This is a GUI based game of Connect 4 written in Java using OOP. The game can be played by two players who will take turns dropping their markers into columns. The names of each player will be requested by the GUI before the first game. Each game will continue until someone wins or the board becomes full. The user has the option of starting a new game at the end of every match. A Score Board is included in the GUI and all results are written/updated on an output file named Connect4-Results.txt. The player with the most wins will be displayed as “Champion”.', url:'https://github.com/ChrisEspinal/Connect4' },\n      { project: 2, name: 'Monster Game', imageUrl: \"https://media.giphy.com/media/nJdsVIieh1I04sMwXz/giphy.gif\", description: 'This is a text-based adventure game written in Java. The game creates a player object using information from a file (given by the user and can be updated at any time); such player will go through a dungeon consisting of three rooms, each containing a monster, and will be able to challenge the monsters one-by-one. Once the player reaches the final room, they will discover a hidden treasure if they are successful in defeating this last monster. Throughout the game, messages will be displayed on the screen to tell the user what happens and options will be provided on how to interact with each encounter.', url:'https://github.com/ChrisEspinal/MonsterGame' },\n      { project: 3, name: 'Farm', imageUrl: \"https://media.giphy.com/media/WocSRTaOT0djAFvCCl/giphy.gif\", description: 'This collection of classes written in Java illustrate the use of Object-oriented programming through simple implementations of interfaces, inheritance, etc.', url:'https://github.com/ChrisEspinal/Farm' },\n    ],\n    all: function() {\n      return this.projects;\n    },\n    get: function(id) {\n      const isProject = p => p.project === id;\n      return this.projects.find(isProject);\n    },\n  };\n\nconst AllProjects = () =>\n<div className= \"Projects\">\n  <div className= \"Pj-header\">\n  <h1>View A Project</h1>\n  </div>\n  <div className = \"Project-Nav\">\n      {ProjectAPI.all().map(p =>\n        <div key={p.project} className = {p.project}>\n          <div className=\"pjLinks\">\n          <Link className=\"plink\" to={`/projects/${p.project}`}>{p.name}</Link>\n          </div>\n        </div>,\n      )}\n  </div>\n    <div className=\"images\">\n      <div className=\"img1\"><img src = \"https://media.giphy.com/media/TvADQSY3sSVK78CvcB/giphy.gif\" /></div>\n      <div className=\"img2\"><img src = \"https://media.giphy.com/media/wzAZbJgd6D3Ev5LD62/giphy.gif\" /></div>\n      <div className=\"img3\"><img src = \"https://media.giphy.com/media/TKwogTJzvNBNsJhkd9/giphy.gif\" /></div>\n    </div>\n</div>\n\nconst Project = props => {\n    const pj = ProjectAPI.get(parseInt(props.match.params.project));\n    if (!pj) {\n      return <div>Project not found :(</div>;\n    }\n    return (\n      <div className=\"ProjectPage\">\n        <div className=\"PSubPHeader\">{pj.name}</div>\n        <div className=\"PContainer\">\n        <br/><br/>\n        <img src={pj.imageUrl} alt=\"\"/>\n        <div className=\"Description\">{pj.description}</div>\n        <div className=\"RepoLinkContainer\">\n        <a href={pj.url} className = \"RepoLink\">Go To Repo</a>\n        </div>\n        <br/><br/><br/><br/>\n        <div className=\"BackLinkContainer\">\n        <Link className=\"BackLink\" to=\"/projects\">Back</Link>\n        </div>\n        </div>\n      </div>\n    );\n  };\n\nconst Projects = () =>\n  <Switch>\n    <Route exact path=\"/projects\" component={AllProjects} />\n    <Route path=\"/projects/:project\" component={Project} />\n  </Switch>;\n\nexport default Projects;","import React, { useState } from \"react\";\nimport \"../ContactMe.css\";\n\nconst ContactMe = () => {\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n \n    setName(\"\");\n    setEmail(\"\");\n    setMessage(\"\");\n\n    alert(name + ', your message has been sent successfully!');\n  };\n\n  return (\n    <div className=\"FormContainer\">\n    <h1>Contact Me</h1>\n    <form className=\"form\" onSubmit={handleSubmit}>\n      <div className=\"ContactInfo\">\n        <div className=\"ContactLinks\">\n        <br/>\n          <div><a href= \"https://github.com/ChrisEspinal\" className = \"Github\">Visit My GitHub</a></div>\n          <br/>\n          <div><a href= \"http://linkedin.com/in/chrisespinal\" className = \"LinkedIn\">Connect On LinkedIn</a></div>\n          <br/><br/>\n          <div className= \"FHeader\">Or complete the form below:</div>\n          <br/><br/><br/>\n        </div>\n      </div>\n\n      <label>Name</label>\n      <input\n        placeholder=\"Name\"\n        value={name}\n        onChange={(e) => setName(e.target.value)}\n      />\n\n      <label>Email</label>\n      <input\n        placeholder=\"Email\"\n        value={email}\n        onChange={(e) => setEmail(e.target.value)}\n      />\n\n      <label>Message</label>\n      <textarea\n        placeholder=\"Message\"\n        value={message}\n        onChange={(e) => setMessage(e.target.value)}\n      ></textarea>\n\n      <button\n        type=\"submit\"\n      >\n        Submit\n      </button>\n    </form>\n    </div>\n  );\n};\n\nexport default ContactMe;","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch, Link } from 'react-router-dom';\nimport Navbar from \"./components/Navbar\"\nimport Home from './components/Home';\nimport AboutMe from './components/AboutMe';\nimport Projects from './components/Projects';\nimport ContactMe from './components/ContactMe';\n\nfunction App() {\n  return (\n    <main>\n      <Router>\n        <Navbar/>\n          <Switch>\n            <Route path=\"/\" component={Home} exact />\n            <Route path=\"/about\" component={AboutMe}/>\n            <Route path=\"/projects\" component={Projects}/>\n            <Route path=\"/contact\" component={ContactMe}/>\n            <Route components={Error}/>\n          </Switch>\n      </Router>\n    </main>\n  );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router} from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router> <App /> </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/world.d6f7874b.png\";","module.exports = __webpack_public_path__ + \"static/media/chris.23c8ede6.png\";"],"sourceRoot":""}